{"version":3,"file":"EditableForm1-2fd3e9dc.js","sources":["../../src/pages/exp6/JUECESHU/EditableForm1.vue","../../src/pages/exp6/JUECESHU/EditableForm1.vue"],"sourcesContent":["<template>\r\n  <div class=\"container\">\r\n    <h1>\r\n      <slot></slot>\r\n    </h1>\r\n    <a-table :columns=\"columns\" :pagination=\"false\" :data-source=\"dataSourceCopy\" bordered>\r\n      <template\r\n        v-for=\"(col, index) in columns.map((item:any) => item.dataIndex).filter((item) => item != 'operation')\"\r\n        :key=\"index\"\r\n        #[col]=\"{ text, record }\"\r\n      >\r\n        <div>\r\n          <a-input\r\n            v-if=\"editableData[record.key]\"\r\n            v-model:value=\"editableData[record.key][col]\"\r\n            style=\"margin: -5px 0\"\r\n          />\r\n          <template v-else>\r\n            {{ text }}\r\n          </template>\r\n        </div>\r\n      </template>\r\n      <template #operation=\"{ record }\">\r\n        <div class=\"editable-row-operations\">\r\n          <!-- <span> -->\r\n          <span v-if=\"editableData[record.key]\">\r\n            <a @click=\"save(record.key)\" style=\"margin: 10px\">保存</a>\r\n            <a-popconfirm title=\"确定取消保存吗？\" @confirm=\"cancel(record.key)\" >\r\n              <a>取消</a>\r\n            </a-popconfirm>\r\n          </span>\r\n          <!-- <span> -->\r\n          <span v-else>\r\n            <a @click=\"edit(record.key)\" style=\"margin: 10px\">编辑</a>\r\n            <a-popconfirm title=\"确定删除本行吗？\" @confirm=\"deleteRow(record.key)\">\r\n              <a>删除</a>\r\n            </a-popconfirm>\r\n          </span>\r\n        </div>\r\n      </template>\r\n    </a-table>\r\n    <div class=\"add-button\">\r\n      <a-button type=\"primary\" @click=\"addRow\">增加一行</a-button>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\n// 可以编辑，增减行列的表格\r\n  import { cloneDeep } from 'lodash-es';\r\n  import { Table } from 'ant-design-vue';\r\n\r\n  export default {\r\n    components: {\r\n      'a-table': Table,\r\n    },\r\n    props: {\r\n      dataSource: {\r\n        type: Array,\r\n        required: true,\r\n      },\r\n      columns: {\r\n        type: Array,\r\n        required: true,\r\n      },\r\n    },\r\n    data() {\r\n      return {\r\n        editingKey: '',\r\n        editableData: {},\r\n        dataSourceCopy: this.dataSource,\r\n      };\r\n    },\r\n    methods: {\r\n      update() {\r\n        this.$emit('updateData', this.dataSourceCopy);\r\n      },\r\n      edit(key) {\r\n        this.editableData[key] = cloneDeep(this.dataSourceCopy.filter((item) => key === item.key)[0]);\r\n        this.editingKey = key;\r\n        this.update();\r\n      },\r\n      save(key) {\r\n        Object.assign(this.dataSourceCopy.filter((item) => key === item.key)[0], this.editableData[key]);\r\n        delete this.editableData[key];\r\n        this.editingKey = '';\r\n        this.update();\r\n      },\r\n      cancel(key) {\r\n        delete this.editableData[key];\r\n        this.editingKey = '';\r\n        this.update();\r\n      },\r\n      addRow() {\r\n        const key = this.dataSourceCopy.length;\r\n        const attributes = this.columns.map((item) => item.dataIndex);\r\n\r\n        // 使用解构赋值和map方法动态生成对象，根据attributes数组的顺序依次添加属性\r\n        const newObj = Object.fromEntries(\r\n          attributes.map((attr) => [attr, '']) // 将每个属性名和空字符串组成一个键值对\r\n        );\r\n\r\n        newObj.key = key.toString(); // 添加key属性\r\n\r\n        this.dataSourceCopy.push(newObj);\r\n\r\n        this.update();\r\n      },\r\n      deleteRow(key) {\r\n        this.dataSourceCopy = this.dataSourceCopy.filter((item) => key !== item.key);\r\n        this.update();\r\n      },\r\n      handleDataSourceChange(data) {\r\n        const attributes = this.columns.map((item) => item.dataIndex);\r\n\r\n        // 遍历数据源中的每一项，根据attributes数组的顺序将每个属性值取出来，组成新的对象数组\r\n        this.dataSourceCopy = data.map((item, index) => {\r\n          return Object.fromEntries(\r\n            attributes.map((attr) => [attr, item[attr]]) // 根据属性名取出属性值，组成键值对数组\r\n          );\r\n        });\r\n\r\n        this.update();\r\n      },\r\n    },\r\n  };\r\n</script>\r\n<style lang=\"less\" scoped>\r\n  .add-button {\r\n    margin-top: 16px;\r\n    text-align: right;\r\n  }\r\n</style>\r\n","<template>\r\n  <div class=\"container\">\r\n    <h1>\r\n      <slot></slot>\r\n    </h1>\r\n    <a-table :columns=\"columns\" :pagination=\"false\" :data-source=\"dataSourceCopy\" bordered>\r\n      <template\r\n        v-for=\"(col, index) in columns.map((item:any) => item.dataIndex).filter((item) => item != 'operation')\"\r\n        :key=\"index\"\r\n        #[col]=\"{ text, record }\"\r\n      >\r\n        <div>\r\n          <a-input\r\n            v-if=\"editableData[record.key]\"\r\n            v-model:value=\"editableData[record.key][col]\"\r\n            style=\"margin: -5px 0\"\r\n          />\r\n          <template v-else>\r\n            {{ text }}\r\n          </template>\r\n        </div>\r\n      </template>\r\n      <template #operation=\"{ record }\">\r\n        <div class=\"editable-row-operations\">\r\n          <!-- <span> -->\r\n          <span v-if=\"editableData[record.key]\">\r\n            <a @click=\"save(record.key)\" style=\"margin: 10px\">保存</a>\r\n            <a-popconfirm title=\"确定取消保存吗？\" @confirm=\"cancel(record.key)\" >\r\n              <a>取消</a>\r\n            </a-popconfirm>\r\n          </span>\r\n          <!-- <span> -->\r\n          <span v-else>\r\n            <a @click=\"edit(record.key)\" style=\"margin: 10px\">编辑</a>\r\n            <a-popconfirm title=\"确定删除本行吗？\" @confirm=\"deleteRow(record.key)\">\r\n              <a>删除</a>\r\n            </a-popconfirm>\r\n          </span>\r\n        </div>\r\n      </template>\r\n    </a-table>\r\n    <div class=\"add-button\">\r\n      <a-button type=\"primary\" @click=\"addRow\">增加一行</a-button>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\n// 可以编辑，增减行列的表格\r\n  import { cloneDeep } from 'lodash-es';\r\n  import { Table } from 'ant-design-vue';\r\n\r\n  export default {\r\n    components: {\r\n      'a-table': Table,\r\n    },\r\n    props: {\r\n      dataSource: {\r\n        type: Array,\r\n        required: true,\r\n      },\r\n      columns: {\r\n        type: Array,\r\n        required: true,\r\n      },\r\n    },\r\n    data() {\r\n      return {\r\n        editingKey: '',\r\n        editableData: {},\r\n        dataSourceCopy: this.dataSource,\r\n      };\r\n    },\r\n    methods: {\r\n      update() {\r\n        this.$emit('updateData', this.dataSourceCopy);\r\n      },\r\n      edit(key) {\r\n        this.editableData[key] = cloneDeep(this.dataSourceCopy.filter((item) => key === item.key)[0]);\r\n        this.editingKey = key;\r\n        this.update();\r\n      },\r\n      save(key) {\r\n        Object.assign(this.dataSourceCopy.filter((item) => key === item.key)[0], this.editableData[key]);\r\n        delete this.editableData[key];\r\n        this.editingKey = '';\r\n        this.update();\r\n      },\r\n      cancel(key) {\r\n        delete this.editableData[key];\r\n        this.editingKey = '';\r\n        this.update();\r\n      },\r\n      addRow() {\r\n        const key = this.dataSourceCopy.length;\r\n        const attributes = this.columns.map((item) => item.dataIndex);\r\n\r\n        // 使用解构赋值和map方法动态生成对象，根据attributes数组的顺序依次添加属性\r\n        const newObj = Object.fromEntries(\r\n          attributes.map((attr) => [attr, '']) // 将每个属性名和空字符串组成一个键值对\r\n        );\r\n\r\n        newObj.key = key.toString(); // 添加key属性\r\n\r\n        this.dataSourceCopy.push(newObj);\r\n\r\n        this.update();\r\n      },\r\n      deleteRow(key) {\r\n        this.dataSourceCopy = this.dataSourceCopy.filter((item) => key !== item.key);\r\n        this.update();\r\n      },\r\n      handleDataSourceChange(data) {\r\n        const attributes = this.columns.map((item) => item.dataIndex);\r\n\r\n        // 遍历数据源中的每一项，根据attributes数组的顺序将每个属性值取出来，组成新的对象数组\r\n        this.dataSourceCopy = data.map((item, index) => {\r\n          return Object.fromEntries(\r\n            attributes.map((attr) => [attr, item[attr]]) // 根据属性名取出属性值，组成键值对数组\r\n          );\r\n        });\r\n\r\n        this.update();\r\n      },\r\n    },\r\n  };\r\n</script>\r\n<style lang=\"less\" scoped>\r\n  .add-button {\r\n    margin-top: 16px;\r\n    text-align: right;\r\n  }\r\n</style>\r\n"],"names":["_sfc_main","Table","key","cloneDeep","item","attributes","newObj","attr","data","index","_withScopeId","n","_pushScopeId","_popScopeId","_hoisted_7","_component_a_button","__unplugin_components_3","_createElementVNode","$props","$data","_createSlots","_withCtx","record","_hoisted_2","_openBlock","_createElementBlock","_hoisted_3","$event","$options","_hoisted_4","_createVNode","_component_a_popconfirm","_hoisted_6","col","text","_createBlock","_component_a_input","_Fragment","_hoisted_9"],"mappings":"qVAoDE,MAAAA,EAAA,CAAe,WAAA,CACD,UAAAC,CACC,EACb,MAAA,CACO,WAAA,CACO,KAAA,MACJ,SAAA,EACI,EACZ,QAAA,CACS,KAAA,MACD,SAAA,EACI,CACZ,EACF,MAAA,CAEE,MAAA,CAAO,WAAA,GACO,aAAA,CAAA,EACG,eAAA,KAAA,UACM,CACvB,EACF,QAAA,CACS,QAAA,CAEL,KAAA,MAAA,aAAA,KAAA,cAAA,CAA4C,EAC9C,KAAAC,EAAA,CAEE,KAAA,aAAAA,CAAA,EAAAC,EAAA,KAAA,eAAA,OAAAC,GAAAF,IAAAE,EAAA,GAAA,EAAA,CAAA,CAAA,EACA,KAAA,WAAAF,EACA,KAAA,OAAA,CAAY,EACd,KAAAA,EAAA,CAEE,OAAA,OAAA,KAAA,eAAA,OAAAE,GAAAF,IAAAE,EAAA,GAAA,EAAA,CAAA,EAAA,KAAA,aAAAF,CAAA,CAAA,EACA,OAAA,KAAA,aAAAA,CAAA,EACA,KAAA,WAAA,GACA,KAAA,OAAA,CAAY,EACd,OAAAA,EAAA,CAEE,OAAA,KAAA,aAAAA,CAAA,EACA,KAAA,WAAA,GACA,KAAA,OAAA,CAAY,EACd,QAAA,CAEE,MAAAA,EAAA,KAAA,eAAA,OACAG,EAAA,KAAA,QAAA,IAAAD,GAAAA,EAAA,SAAA,EAGAE,EAAA,OAAA,YAAsBD,EAAA,IAAAE,GAAA,CAAAA,EAAA,EAAA,CAAA,CACe,EAGrCD,EAAA,IAAAJ,EAAA,WAEA,KAAA,eAAA,KAAAI,CAAA,EAEA,KAAA,OAAA,CAAY,EACd,UAAAJ,EAAA,CAEE,KAAA,eAAA,KAAA,eAAA,OAAAE,GAAAF,IAAAE,EAAA,GAAA,EACA,KAAA,OAAA,CAAY,EACd,uBAAAI,EAAA,CAEE,MAAAH,EAAA,KAAA,QAAA,IAAAD,GAAAA,EAAA,SAAA,EAGA,KAAA,eAAAI,EAAA,IAAA,CAAAJ,EAAAK,IACE,OAAA,YAAcJ,EAAA,IAAAE,GAAA,CAAAA,EAAAH,EAAAG,CAAA,CAAA,CAAA,CAC+B,CAC7C,EAGF,KAAA,OAAA,CAAY,CACd,CAEJ,ECtGW,MAAAG,EAAAC,IAAAC,EAAA,iBAAA,EAAAD,EAAAA,IAAAE,IAAAF,4HAkBEG,EAAA,CAAA,SAAA,gGAxCbC,EAAAC,wBAEiBC,EAAA,KAAA,KAAA,mCAqCL,CAAA,OAnCoC,QAAAC,EAAA,QAAgB,WAAA,GAAwB,cAAAC,EAAA,0BAiBhE,EAAAC,EAAA,CAClB,UAAAC,EAAA,CAAA,CAAA,OAAAC,KAAA,CAEqCL,EAAA,MAAAM,EAAA,CAAnCJ,EAAA,aAAAG,EAAA,GAAA,GAAAE,IAAAC,EAAA,OAAAC,EAAA,CAC4BT,EAAA,IAAA,CAAG,QAAAU,GAAAC,EAAA,KAAAN,EAAA,GAAA,EAAuB,MAAA,CAAA,OAAA,MAAA,CAGrC,EAAA,KAAA,EAAAO,CAAA,EAFeC,EAAAC,EAAA,CAAW,MAAA,WAC9B,UAAAJ,GAAAC,EAAA,OAAAN,EAAA,GAAA,CAAA,EAAA,uBAIb,EAAA,KAAA,CAAA,WAAA,CAAA,CAAA,CAAA,IAAAE,EAAA,EAAAC,EAAA,OAAAO,EAAA,CAC4Bf,EAAA,IAAA,CAAG,QAAAU,GAAAC,EAAA,KAAAN,EAAA,GAAA,EAAuB,MAAA,CAAA,OAAA,MAAA,CAGrC,EAAA,KAAA,EAAAR,CAAA,EAFegB,EAAAC,EAAA,CAAW,MAAA,WAC9B,UAAAJ,GAAAC,EAAA,UAAAN,EAAA,GAAA,CAAA,EAAA,6HAxBf,KAAAW,EAAA,GAAAZ,EAAA,CAAA,CAAA,KAAAa,EAAA,OAAAZ,CAAA,IAAA,CAEiCL,EAAA,MAAA,KAAA,CAD/BE,EAAA,aAAAG,EAAA,GAAA,GAAAE,EAAA,EAAAW,EAAAC,EAAA,CAE6C,IAAA,iCACrB,iBAAAT,GAAAR,EAAA,aAAAG,EAAA,GAAA,EAAAW,CAAA,EAAAN,EAExB,MAAA,CAAA,OAAA,QAAA,CAAA,EAAA,KAAA,EAAA,CAAA,QAAA,gBAAA,CAAA,IAAAH,EAAA,EAAAC,EAAAY,EAAA,CAAA,IAAA,CAAA,EAAA,sBAwBN,CAAA,CAAA,EAAA,KAAA,CAAA,UAAA,aAAA,CAAA,EAC0DpB,EAAA,MAAAqB,EAAA,CAAhCR,EAAAf,EAAA,CAAe,KAAA,UAAE,QAAAa,EAAA,MAAA,EAAA"}